{"version":3,"file":"static/js/38.b61352f4.chunk.js","mappings":"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","sources":["components/AuthForm/AuthForm.jsx","pages/Login.jsx"],"sourcesContent":["import { Box, Button, TextField, Typography, useTheme } from '@mui/material';\nimport { AUTH_TYPES } from '../../constants';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { login, register } from '../../redux/auth/operations';\nimport { useEffect, useState } from 'react';\nimport { selectError } from '../../redux/auth/selectors';\nimport { resetError } from '../../redux/auth/slice';\n\nexport const AuthForm = ({ type }) => {\n  const [nameError, setNameError] = useState(false);\n  const [emailError, setEmailError] = useState(false);\n  const [passwordError, setPasswordError] = useState(false);\n\n  const error = useSelector(selectError);\n\n  const dispatch = useDispatch();\n  const theme = useTheme();\n\n  const isRegister = type === AUTH_TYPES.REGISTER;\n\n  useEffect(() => {\n    return () => {\n      dispatch(resetError());\n    };\n  }, [dispatch]);\n\n  const validateInput = (element, onValidate) => {\n    if (element.value.match(element.pattern)) {\n      onValidate(false);\n      return true;\n    }\n    onValidate(true);\n    return false;\n  };\n\n  const handleNameChange = event => {\n    const name = event.target;\n    validateInput(name, setNameError);\n  };\n\n  const handleEmailChange = event => {\n    const email = event.target;\n    validateInput(email, setEmailError);\n  };\n\n  const handlePasswordChange = event => {\n    const password = event.target;\n    validateInput(password, setPasswordError);\n  };\n\n  const handleFormSubmit = event => {\n    event.preventDefault();\n\n    dispatch(resetError());\n\n    const name = event.target?.name;\n    const email = event.target.email;\n    const password = event.target.password;\n\n    const isValidName = isRegister ? validateInput(name, setNameError) : true;\n    const isValidEmail = validateInput(email, setEmailError);\n    const isValidPassword = validateInput(password, setPasswordError);\n\n    if (!isValidName || !isValidEmail || !isValidPassword) {\n      return;\n    }\n\n    if (isRegister) {\n      dispatch(\n        register({\n          name: name.value,\n          email: email.value,\n          password: password.value,\n        })\n      );\n    } else {\n      dispatch(login({ email: email.value, password: password.value }));\n    }\n  };\n\n  return (\n    <Box\n      component=\"form\"\n      noValidate\n      py={4}\n      mx=\"auto\"\n      display=\"flex\"\n      flexDirection=\"column\"\n      gap={2}\n      maxWidth=\"350px\"\n      onSubmit={handleFormSubmit}\n      autoComplete=\"off\"\n    >\n      {isRegister && (\n        <TextField\n          type=\"text\"\n          label=\"Name\"\n          name=\"name\"\n          variant=\"outlined\"\n          color=\"secondary\"\n          size=\"small\"\n          inputProps={{\n            style: { color: theme.palette.secondary.main },\n            pattern:\n              \"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\",\n          }}\n          autoComplete=\"off\"\n          focused\n          onChange={handleNameChange}\n          error={nameError}\n          {...(nameError && {\n            helperText:\n              \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\",\n          })}\n        />\n      )}\n      <TextField\n        type=\"email\"\n        label=\"E-mail\"\n        name=\"email\"\n        variant=\"outlined\"\n        color=\"secondary\"\n        size=\"small\"\n        inputProps={{\n          style: { color: theme.palette.secondary.main },\n          pattern: '^([0-9a-zA-Zd_.-])+@(([a-zA-Zd-])+.)+([a-zA-Zd]{2,4})+$',\n        }}\n        autoComplete=\"off\"\n        focused\n        onChange={handleEmailChange}\n        error={emailError}\n        {...(emailError && {\n          helperText:\n            'Email must contain only latin letters, numbers, @ and dots',\n        })}\n      />\n      <TextField\n        type=\"password\"\n        label=\"Password\"\n        name=\"password\"\n        variant=\"outlined\"\n        color=\"secondary\"\n        size=\"small\"\n        inputProps={{\n          style: { color: theme.palette.secondary.main },\n          pattern: '^.{4,8}$',\n        }}\n        autoComplete=\"new-password\"\n        focused\n        onChange={handlePasswordChange}\n        error={passwordError}\n        {...(passwordError && {\n          helperText: 'Password must contain from 4 to 8 characters',\n        })}\n      />\n      <Button variant=\"outlined\" type=\"submit\" color=\"secondary\">\n        Submit\n      </Button>\n\n      {error && (\n        <Typography color=\"error\">\n          {`${error}. Check your credentials`}\n        </Typography>\n      )}\n    </Box>\n  );\n};\n","import { Box, Typography } from '@mui/material';\nimport { AuthForm } from '../components/AuthForm/AuthForm';\nimport { AUTH_TYPES } from '../constants';\n\nconst Login = () => {\n  return (\n    <Box bgcolor=\"primary.light\" borderRadius={5} p={4}>\n      <Typography\n        variant=\"h4\"\n        component=\"h1\"\n        color=\"secondary\"\n        fontWeight=\"fontWeightBold\"\n        textAlign=\"center\"\n      >\n        Login\n      </Typography>\n      <AuthForm type={AUTH_TYPES.LOGIN} />\n    </Box>\n  );\n};\n\nexport default Login;\n"],"names":["AuthForm","type","useState","nameError","setNameError","emailError","setEmailError","passwordError","setPasswordError","error","useSelector","selectError","dispatch","useDispatch","theme","useTheme","isRegister","AUTH_TYPES","useEffect","resetError","validateInput","element","onValidate","value","match","pattern","component","noValidate","py","mx","display","flexDirection","gap","maxWidth","onSubmit","event","preventDefault","name","target","email","password","isValidName","isValidEmail","isValidPassword","register","login","autoComplete","label","variant","color","size","inputProps","style","palette","secondary","main","focused","onChange","helperText","bgcolor","borderRadius","p","fontWeight","textAlign"],"sourceRoot":""}